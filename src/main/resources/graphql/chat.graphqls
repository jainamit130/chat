type ChatRoom {
    id: String!
    name: String!
    userIds: [String!]!
    chatRoomType: ChatRoomType!
    createdBy: String
    createdAt: String!
    unreadMessageCount: Int!
    latestMessage: ChatMessage
    recipientUsername: String
    creatorUsername: String
    isExited: Boolean
}

type ChatMessage {
    id: String!
    senderId: String!
    chatRoomId: String!
    timestamp: String!
    status: MessageStatus!
    content: String!
    type: String
    user: User!
    deletedForEveryone: Boolean
}

enum MessageStatus {
    DELIVERED
    READ
    PENDING
    FAILED
}

enum ChatRoomType {
    INDIVIDUAL
    GROUP
    SELF
}

type User {
    id: String!
    username: String!
}

type Query {
    getChatRoomsOfUser(userId: String!): [ChatRoom!]!
    getMessagesOfChatRoom(chatRoomId: String!,userId: String!,fromCount: Int = 0): [ChatMessage!]!
}

type Mutation {
    markAllMessagesRead(chatRoomId: String!, userId: String!): Boolean
    markAllMessagesDelivered(userId: String!): Boolean
}
